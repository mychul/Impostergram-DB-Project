DROP TABLE IF EXISTS User;
DROP TABLE IF EXISTS Comments;
DROP TABLE IF EXISTS Photos;
DROP TABLE IF EXISTS Views;
DROP TABLE IF EXISTS PhotoLikes;
DROP TABLE IF EXISTS Tagged;
DROP TABLE IF EXISTS CommentLikes;
DROP TABLE IF EXISTS Follows;


--------------------------------------------------------------------------------------------------------


--Entities Tables:
CREATE TABLE User
(
username VARCHAR(64) NOT NULL,
email VARCHAR(64),
password VARCHAR(64) NOT NULL,  
PRIMARY KEY (username)
);
CREATE TABLE Comments
(
        comment_id BIGINT NOT NULL,
comment VARCHAR(512),
username VARCHAR(64) NOT NULL,
photo_id VARCHAR(64) NOT NULL,
date DATE NOT NULL,
PRIMARY KEY(comment_id),
FOREIGN KEY(username) REFERENCES User(username) ON DELETE CASCADE,
FOREIGN KEY(photo_id) REFERENCES Photos(photo_id) ON DELETE CASCADE
);
CREATE TABLE Photos
(
        photo_id VARCHAR(64) NOT NULL,
        publisher VARCHAR(64) NOT NULL,
        date DATE NOT NULL,
        privacy BIT NOT NULL,
        description VARCHAR(512),
        PRIMARY KEY(photo_id),
        FOREIGN KEY(username) REFERENCES User(username) ON DELETE CASCADE
);


--------------------------------------------------------------------------------------------------------
--Relation Tables:
CREATE TABLE Views
(
        username VARCHAR(64) NOT NULL,
        photo_id VARCHAR(64) NOT NULL,
        PRIMARY KEY(username,photo_id),
        FOREIGN KEY(username) REFERENCES User(username) ON DELETE CASCADE,
FOREIGN KEY(photo_id) REFERENCES Photos(photo_id) ON DELETE CASCADE
);
CREATE TABLE PhotoLikes
(
        username VARCHAR(64) NOT NULL,
        photo_id VARCHAR(64) NOT NULL,
        PRIMARY KEY(username, photo_id),
        FOREIGN KEY(username) REFERENCES User(username) ON DELETE CASCADE,
FOREIGN KEY(photo_id) REFERENCES Photos(photo_id) ON DELETE CASCADE
);
--all the people who are tagged in the photo
CREATE TABLE Tagged
(
        username VARCHAR(64) NOT NULL,
        photo_id VARCHAR(64) NOT NULL
PRIMARY KEY(username, photo_id),
        FOREIGN KEY(username) REFERENCES User(username) ON DELETE CASCADE,
FOREIGN KEY(photo_id) REFERENCES Photos(photo_id) ON DELETE CASCADE
);
 --User Likes a Comment
CREATE TABLE Likes
(
username VARCHAR(64) NOT NULL,
        comment_id VARCHAR(512), NOT NULL
PRIMARY KEY(username, comment_id), FOREIGN KEY(username) REFERENCES User(username) ON DELETE CASCADE,
FOREIGN KEY(comment_id) REFERENCES Comment(comment_id) ON DELETE CASCADE
);
--1 follows 2
CREATE TABLE Follows
(
        username1 VARCHAR(64) NOT NULL,
        username2 VARCHAR(64) NOT NULL,
PRIMARY KEY(username1, username2),
        FOREIGN KEY(username1) REFERENCES User(username) ON DELETE CASCADE,
FOREIGN KEY(username2) REFERENCES User(username) ON DELETE CASCADE
);


--===================================================================
--Dummy CSV Files
----------------------------
-- INSERT DATA STATEMENTS --
----------------------------
--Entity Data
COPY User (
        username,
email,
password
)
FROM ‘User.csv’
WITH DELIMITER ‘,’ NULL AS ‘’;


COPY Photos (
        photo_id,
        publisher,
description,
        privacy,
        date        
)
FROM ‘Photos.csv’
WITH DELIMITER ‘,’;


COPY Comment(
        comment_id,
        comment,
        username,
        photo_id,
        date
)
FROM ‘Comment.csv’
WITH DELIMITER ‘,’ NULL AS ‘’;








--------------------------------------------------------------------------------------------------------
--Relations Data
COPY Views (
        username,
        photo_id
)
FROM ‘Views.csv’
WITH DELIMITER ‘,’;


COPY PhotoLikes(
        username,
        photo_id
)
FROM ‘PhotoLikes.csv’
WITH DELIMITER ‘,’;


COPY Tagged(
        username,
        photo_id
)
FROM ‘Tagged.csv’
WITH DELIMITER ‘,’;


COPY Likes (
        username,
        comment_id
)
FROM ‘Likes.csv’
WITH DELIMITER ‘,’;


COPY Follows(
        username1,
        username2
)
FROM ‘Follows.csv’
WITH DELIMITER ‘,’;